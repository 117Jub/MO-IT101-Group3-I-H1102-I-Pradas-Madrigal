package MotoPHPayrollSystem.jubiler;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class payrollSystem {
	public static void main(String[] args) {
		  Scanner scanner = new Scanner(System.in);
	        System.out.print("Enter Employee Number: ");
	        String userInput = scanner.nextLine();
	        String employeeDetails = getEmployeeDetails(userInput);
	    

	  
	        if (!employeeDetails.isEmpty()) {
	            String[] employee = employeeDetails.split(";");
	            System.out.println("Employee Number                 Name                            Birthday                        Status");
	            String formattedEmployee1 = String.format("%-30s  %-30s  %-30s  %-30s",
	                    employee[0], employee[1] + ", " + employee[2], employee[3], employee[11]);
	            System.out.println(formattedEmployee1);
	            System.out.println("Address");
	            System.out.println(employee[4]);
	            System.out.println("");
	            System.out.println("Position");
	            System.out.println(employee[11]);
	            System.out.println("");
	            System.out.println("Immediate Supervisor");
	            System.out.println(employee[12]);
	            System.out.println("");
	            System.out.println("Philhealth Number               TIN                             SSS                             Pag-ibig");
	            String formattedEmployee2 = String.format("%-30s  %-30s  %-30s  %-30s",
	                    employee[7], employee[8], employee[6], employee[9]);
	            System.out.println(formattedEmployee2);
	            System.out.println("************************************************************************************************************");

	            System.out.print("Enter Hours Worked: ");
	            
	            double hoursWorked = getHoursWorked();
	            double hourlyRate = parseDoubleDefault(employee[18]);
	            double monthlySalary = calculateMonthlySalary(hoursWorked, hourlyRate);
	            double sssDeduction = calculateSSSDeduction(monthlySalary);
	            double philhealthDeduction = calculatePhilhealthDeduction(monthlySalary);
	            double pagibigDeduction = calculatePagibigDeduction(monthlySalary);
	            double dailyRate = calculateDailyRate(hourlyRate);
	            double riceAllowance = calculateRiceAllowance(monthlySalary);
	            double clothingAllowance = calculateClothingAllowance(monthlySalary);
	            double phoneAllowance = calculatePhoneAllowance(monthlySalary);
	            double totalAllowances = riceAllowance + clothingAllowance + phoneAllowance;
	            double totalDeductions = philhealthDeduction + pagibigDeduction + sssDeduction;
	            double taxableIncome = (monthlySalary - totalDeductions);
	            double withholdingTax = calculateWithholdingTax(monthlySalary);
	            double netSalary = calculateNetSalary(monthlySalary, phoneAllowance, clothingAllowance, riceAllowance);
	            
	            displaySalaryDetails(hoursWorked, monthlySalary, sssDeduction, philhealthDeduction, pagibigDeduction, withholdingTax, netSalary, riceAllowance, clothingAllowance, phoneAllowance);
	            
	            System.out.println("Daily Rate: ₱" + dailyRate);
	            System.out.println("Hours Worked: " + hoursWorked);
	    	    System.out.println("Monthly Salary: ₱" + monthlySalary);
	    	    System.out.println("Rice Allowance:  ₱" + riceAllowance);
	    	    System.out.println("Phone Allowance: ₱" + phoneAllowance);
	    	    System.out.println("Clothing Allowance: ₱" + clothingAllowance);
	    	    System.out.println("SSS Deduction: ₱" + sssDeduction);
	    	    System.out.println("Philhealth Deduction: ₱" + philhealthDeduction);
	    	    System.out.println("Pag-ibig Deduction: ₱" + pagibigDeduction);
	    	    System.out.println("Withholding Tax: ₱" + withholdingTax);
	    	    System.out.println("Net Salary: ₱" + netSalary);
	            
	        } else {
	            System.out.println("No data found. Please try again.");
	        }
	    }

	 private static void displaySalaryDetails(double hoursWorked, double monthlySalary, double sssDeduction,
             double philhealthDeduction, double pagibigDeduction, double withholdingTax,
             double netSalary, double riceAllowance, double clothingAllowance,
             double phoneAllowance) {
	}
	 private static double calculateNetSalary(double grossSalary, double phoneAllowance, double clothingAllowance,
             double riceAllowance) {
return grossSalary - phoneAllowance - clothingAllowance - riceAllowance;
	 
		}
		public static String getEmployeeDetails(String employeeId) {
	        String path = "/Users/DELL/OneDrive/Desktop/MotorPH Employee Data - Employee Details.csv";
	        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {
	            reader.readLine(); //
	            String line;
	            while ((line = reader.readLine()) != null) {
	                String[] row = line.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)");
	                if (row[0].trim().equals(employeeId)) {
	                    return line.replaceAll(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)", ";");
	                }
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return "";
	    }

	    public static double calculateMonthlySalary(double hoursWorked, double hourlyRate) {
	        return hoursWorked * hourlyRate;
	    }

	    public static double calculateSSSDeduction(double grossSalary) {
	        return grossSalary * 0.12;
	    }

	    public static double calculatePhilhealthDeduction(double grossSalary) {
	        return grossSalary * 0.11;
	    }

	    public static double calculatePagibigDeduction(double grossSalary) {
	        return grossSalary * 0.02;
	    }

	    public static double calculateWithholdingTax(double grossSalary) {
	        return grossSalary * 0.10;
	    }
	    public static double calculateDailyRate(double hourlyRate) {
	        return  hourlyRate * 8;
	    }
	    public static double calculateRiceAllowance(double grossSalary) {
	        return  grossSalary * 0.07;
	    }
	    public static double calculatePhoneAllowance(double grossSalary) {
	        return  grossSalary * 0.093;
	    }
	    public static double calculateClothingAllowance(double grossSalary) {
	        return  grossSalary * 0.047;
	    }
	    
	    public static double getHoursWorked() {
	        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));
	        double hoursWorked = 0;
	        try {
	            hoursWorked = Double.parseDouble(inputReader.readLine());
	        } catch (IOException | NumberFormatException e) {
	            System.out.println("Invalid input. Please enter valid hours worked.");
	            hoursWorked = getHoursWorked();
	        }
	        return hoursWorked;
	    }

	    public static double parseDoubleDefault(String value) {
	        try {
	            return Double.parseDouble(value);
	        } catch (NumberFormatException e) {
	            return 0.0;
	        }
	    }
}
